{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","status","setStatus","prevent","setPrevent","useEffect","stream$","Observable","observer","intervalId","setInterval","next","val","clearInterval","subscribe","unsubscribe","start","useCallback","stop","reset","Date","toISOString","slice","type","onClick","timerInstance","setTimeout","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4JA8DeA,EA1DH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACR,IAAMC,EAAU,IAAIC,KAAW,SAACC,GAC9B,GAAc,UAAXP,EAAmB,CACpB,IAAMQ,EAAaC,aAAY,WAC7BF,EAASG,KAAKX,GAAQ,SAACY,GAAD,OAASA,EAAM,UACpC,KAEH,OAAO,WACLC,cAAcJ,QAGjBK,UAAU,CAACH,KAAM,kBAAMX,KAE1B,OAAQ,WACNM,EAAQS,iBAET,CAACd,IAEJ,IAAMe,EAAQC,uBAAY,kBAAMf,EAAU,WAAU,IAC9CgB,EAAOD,uBAAY,WAAQf,EAAU,QAASF,EAAQ,KAAM,IAC5DmB,EAAQF,uBAAY,kBAAMjB,EAAQ,KAAI,IAgB5C,OACE,gCACE,6BACG,IAAIoB,KAAKrB,GAAMsB,cAAcC,MAAM,GAAI,MAE1C,gCACc,UAAXrB,EACG,wBAAQsB,KAAK,SAASC,QAASN,EAA/B,kBACA,wBAAQK,KAAK,SAASC,QAASR,EAA/B,mBAEJ,wBAAQO,KAAK,SAASC,QAxBf,WACX,GAAIrB,EAAS,CACXC,GAAW,GACX,IAAMqB,EAAgBC,YAAW,WAC/BtB,GAAW,GACXuB,aAAaF,KACZ,UAEC1B,GACFG,EAAU,SAeV,kBACA,wBAAQqB,KAAK,SAASC,QAASL,EAA/B,0B,OC5COS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,EAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,K","file":"static/js/main.6d812fa5.chunk.js","sourcesContent":["import './App.css'\r\nimport React, { useEffect, useState, useCallback } from 'react'\r\nimport { Observable } from \"rxjs\";\r\n\r\nconst App = () => {\r\n  const [time, setTime] = useState(0);\r\n  const [status, setStatus] = useState(\"stop\");\r\n  const [prevent, setPrevent] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const stream$ = new Observable((observer) => {\r\n      if(status === 'start'){\r\n        const intervalId = setInterval(() => {\r\n          observer.next(setTime((val) => val + 1000));\r\n        }, 1000);\r\n\r\n        return () => {\r\n          clearInterval(intervalId);\r\n        };\r\n      }\r\n    }).subscribe({next: () => setTime});\r\n\r\n    return (() => {\r\n      stream$.unsubscribe();\r\n    });\r\n  }, [status]);\r\n \r\n  const start = useCallback(() => setStatus(\"start\"), []);\r\n  const stop = useCallback(() => { setStatus(\"stop\"); setTime(0) }, []);\r\n  const reset = useCallback(() => setTime(0), []);\r\n \r\n  const wait = () => {\r\n    if (prevent) {\r\n      setPrevent(false);\r\n      const timerInstance = setTimeout(function () {\r\n        setPrevent(true);\r\n        clearTimeout(timerInstance);\r\n      }, 300);\r\n    } else {\r\n      if (time) {\r\n        setStatus('wait')\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {new Date(time).toISOString().slice(11, 19)}\r\n      </h1>\r\n      <div>\r\n        {status === 'start'\r\n          ? <button type=\"button\" onClick={stop}>STOP</button>\r\n          : <button type=\"button\" onClick={start}>START</button>\r\n        }\r\n        <button type=\"button\" onClick={wait}>WAIT</button>\r\n        <button type=\"button\" onClick={reset}>RESET</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\nimport App from './App';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}